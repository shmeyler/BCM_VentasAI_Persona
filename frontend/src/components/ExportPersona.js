import React, { useState } from 'react';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { Document, Page, Text, View, StyleSheet, PDFDownloadLink, Image, Font } from '@react-pdf/renderer';

// PDF Styles for React-PDF
const styles = StyleSheet.create({
  page: {
    flexDirection: 'column',
    backgroundColor: '#ffffff',
    padding: 30,
    fontFamily: 'Helvetica'
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 20,
    paddingBottom: 15,
    borderBottomWidth: 2,
    borderBottomColor: '#FF9800'
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#FF9800'
  },
  subtitle: {
    fontSize: 12,
    color: '#666666',
    marginTop: 5
  },
  section: {
    margin: 10,
    padding: 10,
    backgroundColor: '#f8f9fa',
    borderRadius: 5
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#004E5F',
    marginBottom: 10
  },
  text: {
    fontSize: 11,
    lineHeight: 1.5,
    marginBottom: 5
  },
  listItem: {
    fontSize: 10,
    marginLeft: 15,
    marginBottom: 3
  },
  chart: {
    width: '100%',
    height: 200,
    marginVertical: 10
  },
  footer: {
    position: 'absolute',
    bottom: 30,
    left: 30,
    right: 30,
    textAlign: 'center',
    fontSize: 10,
    color: '#666666'
  }
});

// Detailed PDF Document Component
const DetailedPersonaPDF = ({ persona, generatedPersona }) => {
  const persona_data = generatedPersona?.persona_data || persona;
  
  return (
    <Document>
      {/* Page 1: Overview */}
      <Page size="A4" style={styles.page}>
        <View style={styles.header}>
          <View>
            <Text style={styles.title}>{persona_data?.name || "Generated Persona"}</Text>
            <Text style={styles.subtitle}>Comprehensive Marketing Persona Analysis</Text>
          </View>
          <Text style={{ fontSize: 10, color: '#666666' }}>
            Generated: {new Date().toLocaleDateString()}
          </Text>
        </View>

        {/* Executive Summary */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Executive Summary</Text>
          <Text style={styles.text}>
            This persona represents a data-driven consumer profile generated using advanced AI and 
            multiple data sources including Resonate rAI, SparkToro, SEMRush, and Buzzabout.ai.
          </Text>
        </View>

        {/* Demographics */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Demographics</Text>
          <Text style={styles.text}>Age Range: {persona_data?.demographics?.age_range || 'Not specified'}</Text>
          <Text style={styles.text}>Gender: {persona_data?.demographics?.gender || 'Not specified'}</Text>
          <Text style={styles.text}>Income: {persona_data?.demographics?.income_range || 'Not specified'}</Text>
          <Text style={styles.text}>Education: {persona_data?.demographics?.education || 'Not specified'}</Text>
          <Text style={styles.text}>Location: {persona_data?.demographics?.location || 'Not specified'}</Text>
          <Text style={styles.text}>Occupation: {persona_data?.demographics?.occupation || 'Not specified'}</Text>
        </View>

        {/* Key Attributes */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Key Behavioral Attributes</Text>
          <Text style={styles.text}>Industry Vertical: {persona_data?.attributes?.selectedVertical || 'Not specified'}</Text>
          <Text style={styles.text}>Behaviors:</Text>
          {persona_data?.attributes?.selectedBehaviors?.map((behavior, index) => (
            <Text key={index} style={styles.listItem}>• {behavior}</Text>
          )) || <Text style={styles.listItem}>• No behaviors specified</Text>}
        </View>

        <View style={styles.footer}>
          <Text>Generated by BCM VentasAI Persona Generator | The AI Performance Marketing Agency</Text>
        </View>
      </Page>

      {/* Page 2: Media Consumption & Psychographics */}
      <Page size="A4" style={styles.page}>
        <View style={styles.header}>
          <Text style={styles.title}>Media Consumption & Psychographics</Text>
        </View>

        {/* Social Media Platforms */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Social Media Engagement</Text>
          {persona_data?.media_consumption?.social_media_platforms?.map((platform, index) => (
            <Text key={index} style={styles.listItem}>• {platform}</Text>
          )) || <Text style={styles.listItem}>• No platforms specified</Text>}
        </View>

        {/* Device & Timing */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Device Usage & Timing</Text>
          <Text style={styles.text}>
            Primary engagement occurs across multiple devices with peak activity during 
            business hours and evening leisure time.
          </Text>
        </View>

        {/* Search Behavior */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Search Behavior Insights</Text>
          <Text style={styles.text}>
            Analysis of search patterns reveals intent-driven behavior with focus on 
            product research and comparison shopping.
          </Text>
        </View>

        <View style={styles.footer}>
          <Text>Page 2 of 3 | BCM VentasAI Persona Generator</Text>
        </View>
      </Page>

      {/* Page 3: Recommendations */}
      <Page size="A4" style={styles.page}>
        <View style={styles.header}>
          <Text style={styles.title}>Marketing Recommendations</Text>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Recommended Marketing Strategies</Text>
          <Text style={styles.listItem}>• Targeted social media campaigns on preferred platforms</Text>
          <Text style={styles.listItem}>• Content marketing aligned with behavioral attributes</Text>
          <Text style={styles.listItem}>• Personalized messaging based on demographic insights</Text>
          <Text style={styles.listItem}>• Cross-platform engagement strategies</Text>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Data Sources</Text>
          <Text style={styles.text}>This analysis is powered by:</Text>
          <Text style={styles.listItem}>• Resonate rAI - Psychographic profiling</Text>
          <Text style={styles.listItem}>• SparkToro - Audience intelligence</Text>
          <Text style={styles.listItem}>• SEMRush - Search behavior analysis</Text>
          <Text style={styles.listItem}>• Buzzabout.ai - Social listening insights</Text>
        </View>

        <View style={styles.footer}>
          <Text>Page 3 of 3 | Generated by BCM VentasAI | beebyclarkmeyler.com</Text>
        </View>
      </Page>
    </Document>
  );
};

// Single Page PDF Document Component
const SinglePagePersonaPDF = ({ persona, generatedPersona }) => {
  const persona_data = generatedPersona?.persona_data || persona;
  
  return (
    <Document>
      <Page size="A4" style={styles.page}>
        <View style={styles.header}>
          <View>
            <Text style={styles.title}>{persona_data?.name || "Generated Persona"}</Text>
            <Text style={styles.subtitle}>Marketing Persona Profile</Text>
          </View>
        </View>

        <View style={{ flexDirection: 'row', justifyContent: 'space-between' }}>
          {/* Left Column */}
          <View style={{ width: '48%' }}>
            <View style={styles.section}>
              <Text style={styles.sectionTitle}>Demographics</Text>
              <Text style={styles.text}>Age: {persona_data?.demographics?.age_range || 'N/A'}</Text>
              <Text style={styles.text}>Gender: {persona_data?.demographics?.gender || 'N/A'}</Text>
              <Text style={styles.text}>Income: {persona_data?.demographics?.income_range || 'N/A'}</Text>
              <Text style={styles.text}>Education: {persona_data?.demographics?.education || 'N/A'}</Text>
            </View>

            <View style={styles.section}>
              <Text style={styles.sectionTitle}>Behavioral Attributes</Text>
              <Text style={styles.text}>Vertical: {persona_data?.attributes?.selectedVertical || 'N/A'}</Text>
              {persona_data?.attributes?.selectedBehaviors?.slice(0, 3).map((behavior, index) => (
                <Text key={index} style={styles.listItem}>• {behavior}</Text>
              ))}
            </View>
          </View>

          {/* Right Column */}
          <View style={{ width: '48%' }}>
            <View style={styles.section}>
              <Text style={styles.sectionTitle}>Media Consumption</Text>
              {persona_data?.media_consumption?.social_media_platforms?.slice(0, 4).map((platform, index) => (
                <Text key={index} style={styles.listItem}>• {platform}</Text>
              ))}
            </View>

            <View style={styles.section}>
              <Text style={styles.sectionTitle}>Key Insights</Text>
              <Text style={styles.text}>
                This persona represents a target demographic with specific behavioral 
                patterns and media consumption habits ideal for targeted marketing campaigns.
              </Text>
            </View>
          </View>
        </View>

        <View style={styles.footer}>
          <Text>Generated by BCM VentasAI Persona Generator | The AI Performance Marketing Agency</Text>
        </View>
      </Page>
    </Document>
  );
};

// Main Export Component
const ExportPersona = ({ persona, generatedPersona, className = "" }) => {
  const [isExporting, setIsExporting] = useState(false);
  const [exportType, setExportType] = useState(null);
  const [showExportMenu, setShowExportMenu] = useState(false);

  const persona_data = generatedPersona?.persona_data || persona;

  // PDF Export using html2canvas + jsPDF
  const exportToSimplePDF = async () => {
    console.log('Starting PDF export...');
    setIsExporting(true);
    try {
      const element = document.getElementById('persona-content');
      console.log('Found element:', element);
      
      if (!element) {
        console.error('Element persona-content not found');
        alert('Persona content not found. Please make sure you are on the persona page.');
        return;
      }

      console.log('Starting html2canvas...');
      const canvas = await html2canvas(element, {
        scale: 2,
        useCORS: true,
        allowTaint: true
      });
      console.log('Canvas created:', canvas);

      const imgData = canvas.toDataURL('image/png');
      console.log('Image data created, length:', imgData.length);
      
      const pdf = new jsPDF('p', 'mm', 'a4');
      const imgWidth = 210;
      const pageHeight = 295;
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      let heightLeft = imgHeight;

      let position = 0;

      console.log('Adding image to PDF...');
      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;

      while (heightLeft >= 0) {
        position = heightLeft - imgHeight;
        pdf.addPage();
        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
        heightLeft -= pageHeight;
      }

      console.log('Saving PDF...');
      pdf.save(`${persona_data?.name || 'persona'}-visual-template.pdf`);
      console.log('PDF export completed successfully');
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert(`Error generating PDF: ${error.message}`);
    } finally {
      setIsExporting(false);
      setShowExportMenu(false);
    }
  };

  // Google Slides Export
  const exportToGoogleSlides = async () => {
    setIsExporting(true);
    try {
      // This will be implemented with Google Slides API
      alert('Google Slides export functionality will be available once Google Cloud credentials are configured.');
      
      // TODO: Implement Google Slides API integration
      // const slidesContent = generateSlidesContent(persona_data);
      // await createGoogleSlidesPresentation(slidesContent);
      
    } catch (error) {
      console.error('Error exporting to Google Slides:', error);
      alert('Error exporting to Google Slides. Please try again.');
    } finally {
      setIsExporting(false);
      setShowExportMenu(false);
    }
  };

  return (
    <div className={`relative ${className}`}>
      <button
        onClick={() => setShowExportMenu(!showExportMenu)}
        className="bcm-btn-primary flex items-center text-sm py-2 px-4"
        disabled={isExporting}
      >
        {isExporting ? (
          <>
            <svg className="animate-spin -ml-1 mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
              <path className="opacity-75" fill="currentColor" d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Exporting...
          </>
        ) : (
          <>
            <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3M3 17V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v10a2 2 0 01-2 2H5a2 2 0 01-2-2z" />
            </svg>
            Export
          </>
        )}
      </button>

      {showExportMenu && (
        <div className="absolute right-0 top-full mt-2 w-64 bg-white rounded-lg shadow-lg border border-gray-200 z-50">
          <div className="p-4">
            <h3 className="font-bold text-gray-900 mb-3 font-montserrat">Export Options</h3>
            
            {/* PDF Options */}
            <div className="space-y-2 mb-4">
              <h4 className="text-sm font-medium text-gray-700 font-montserrat">PDF Export</h4>
              
              <PDFDownloadLink
                document={<DetailedPersonaPDF persona={persona} generatedPersona={generatedPersona} />}
                fileName={`${persona_data?.name || 'persona'}-detailed-analysis.pdf`}
                className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-md transition-colors"
              >
                📄 Detailed Multi-Page Report
              </PDFDownloadLink>

              <PDFDownloadLink
                document={<SinglePagePersonaPDF persona={persona} generatedPersona={generatedPersona} />}
                fileName={`${persona_data?.name || 'persona'}-summary.pdf`}
                className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-md transition-colors"
              >
                📋 Single Page Summary
              </PDFDownloadLink>

              <button
                onClick={exportToSimplePDF}
                className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-md transition-colors"
              >
                🖼️ Visual Template (Current View)
              </button>
            </div>

            {/* Google Slides Option */}
            <div className="border-t border-gray-200 pt-3">
              <h4 className="text-sm font-medium text-gray-700 mb-2 font-montserrat">Presentation Export</h4>
              <button
                onClick={exportToGoogleSlides}
                className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-md transition-colors"
              >
                📊 Google Slides Presentation
              </button>
            </div>

            <button
              onClick={() => setShowExportMenu(false)}
              className="mt-3 w-full text-center px-3 py-2 text-xs text-gray-500 hover:text-gray-700 transition-colors"
            >
              Cancel
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default ExportPersona;